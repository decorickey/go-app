// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/finance.go
//
// Generated by this command:
//
//	mockgen -source=domain/service/finance.go -destination=domain/service/mock_finance.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	finance "go-app/domain/model/finance"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFinanceService is a mock of FinanceService interface.
type MockFinanceService struct {
	ctrl     *gomock.Controller
	recorder *MockFinanceServiceMockRecorder
}

// MockFinanceServiceMockRecorder is the mock recorder for MockFinanceService.
type MockFinanceServiceMockRecorder struct {
	mock *MockFinanceService
}

// NewMockFinanceService creates a new mock instance.
func NewMockFinanceService(ctrl *gomock.Controller) *MockFinanceService {
	mock := &MockFinanceService{ctrl: ctrl}
	mock.recorder = &MockFinanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinanceService) EXPECT() *MockFinanceServiceMockRecorder {
	return m.recorder
}

// SimulateAnnualInvestment mocks base method.
func (m *MockFinanceService) SimulateAnnualInvestment(a finance.Amount, p finance.Period, r finance.Roi) (finance.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimulateAnnualInvestment", a, p, r)
	ret0, _ := ret[0].(finance.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimulateAnnualInvestment indicates an expected call of SimulateAnnualInvestment.
func (mr *MockFinanceServiceMockRecorder) SimulateAnnualInvestment(a, p, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateAnnualInvestment", reflect.TypeOf((*MockFinanceService)(nil).SimulateAnnualInvestment), a, p, r)
}
