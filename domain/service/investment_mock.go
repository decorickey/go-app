// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/investment.go
//
// Generated by this command:
//
//	mockgen -source=domain/service/investment.go -destination=domain/service/investment_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPeriodicInvestmentService is a mock of PeriodicInvestmentService interface.
type MockPeriodicInvestmentService struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodicInvestmentServiceMockRecorder
}

// MockPeriodicInvestmentServiceMockRecorder is the mock recorder for MockPeriodicInvestmentService.
type MockPeriodicInvestmentServiceMockRecorder struct {
	mock *MockPeriodicInvestmentService
}

// NewMockPeriodicInvestmentService creates a new mock instance.
func NewMockPeriodicInvestmentService(ctrl *gomock.Controller) *MockPeriodicInvestmentService {
	mock := &MockPeriodicInvestmentService{ctrl: ctrl}
	mock.recorder = &MockPeriodicInvestmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodicInvestmentService) EXPECT() *MockPeriodicInvestmentServiceMockRecorder {
	return m.recorder
}

// Simulate mocks base method.
func (m *MockPeriodicInvestmentService) Simulate(monthlyInvestmentAmount, investmentPeriod int, roi float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Simulate", monthlyInvestmentAmount, investmentPeriod, roi)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Simulate indicates an expected call of Simulate.
func (mr *MockPeriodicInvestmentServiceMockRecorder) Simulate(monthlyInvestmentAmount, investmentPeriod, roi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simulate", reflect.TypeOf((*MockPeriodicInvestmentService)(nil).Simulate), monthlyInvestmentAmount, investmentPeriod, roi)
}
